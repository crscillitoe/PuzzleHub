// -----------------------------------------------------------------------------
// This file contains functions, mixins for breakpoint sizes and media queries.
//
// Also largely ripped from Bootstrap.
// -----------------------------------------------------------------------------

// Name of the next breakpoint, or null for the last breakpoint.
@function breakpoint-next($name, $bps: $breakpoints, $bp-names: map-keys($bps)) {
  $n: index($bp-names, $name);
  @return if($n != null and $n < length($bp-names), nth($bp-names, $n +1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function breakpoint-min($name, $bps: $breakpoints) {
  $min: map-get($bps, $name);
  @return if($min != 0, $min, null);
}

// Quoted Bootstrap Comment
// "Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261"
@function breakpoint-max($name, $bps: $breakpoints) {
  $next: breakpoint-next($name, $bps);
  @return if ($next, breakpoint-min($next, $bps) - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
@function breakpoint-infix($name, $bps: $breakpoints) {
  @return if(breakpoint-min($name, $bps) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $bps: $breakpoints) {
  $min: breakpoint-min($name, $bps);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $bps: $breakpoints) {
  $max: breakpoint-max($name, $bps);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $bps: $breakpoints) {
  $min: breakpoint-min($lower, $bps);
  $max: breakpoint-max($upper, $bps);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $bps) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $bps) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $bps: $breakpoints) {
  $min: breakpoint-min($name, $bps);
  $max: breakpoint-max($name, $bps);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $bps) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $bps) {
      @content;
    }
  }
}
